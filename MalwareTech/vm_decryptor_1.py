file_open=open('ram.bin','rb')
ram_mem=map(ord,file_open.read())
file_open.close()

val = 0


def vm_work(ram_mem,opcode,operand1,operand2):
    global val
    if opcode == 1:
        ram_mem[operand1] = operand2
    elif opcode == 2:
        val = ram_mem[operand1]
    elif opcode == 3:
        ram_mem[operand1] = val ^ ram_mem[operand1]
    else:
        return 0
    return 1


def init_function(my_index):
    program_counter = 0 #index = 0;
    c = 1
    while c == 1: 
        opcode = ram_mem[program_counter + 255]                #    v0 = (unsigned __int8)Buffer[index + 255];        #    v1 = index + 1; 
        operand1 = ram_mem[program_counter + 1 +255]             #    v2 = (unsigned __int8)Buffer[v1++ + 255];      
        operand2 = ram_mem[program_counter + 2 + 255]            # v3 = Buffer[v1 + 255];
        program_counter = program_counter + 3                           #    index = v1 + 1;
        c = vm_work(ram_mem,opcode,operand1,operand2)
        if c == 0:
            break



init_function(ram_mem)


flag = ''
for i in range(len(ram_mem)):
    flag = flag + chr(ram_mem[i])
    if chr(ram_mem[i]) == '}':
    	break
print flag


