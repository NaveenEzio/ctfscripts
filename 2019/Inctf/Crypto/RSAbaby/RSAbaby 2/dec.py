from Crypto.Util.number import *
import gmpy2
n = 143786356117385195355522728814418684024129402954309769186869633376407480449846714776247533950484109173163811708549269029920405450237443197994941951104068001708682945191370596050916441792714228818475059839352105948003874426539429621408867171203559281132589926504992702401428910240117807627890055235377744541913
e = 114194
ciphertext =0x2383a8b78b75be07df1e64aefcd5af5c49088b1c331d354e9ce991ce7fdb936a28211875a5d633cbf9238b153820a391236fdf086da109a4c8a55a5153d8ec262ce51c168e4095c01772c29c23802c23eef7950dbebf4030237370d3d264930e0ed0bf709c1bad7135a8e881e304d3700ccac822a402513b906aae7845d87819

p = 11196022518013846406450257763680307528861440840633712357021019120934410373180406217919066924474450204377977943388931820832436504741695416094988192576484719
q = n/p
assert n == p*q

phi = (p-1)*(q-1)
g = GCD(e, phi)
assert g == 2

d = inverse(e/g, phi)
assert (e*d)%phi == g

plaintext_squared = pow(ciphertext, d, n)
print(long_to_bytes(gmpy2.isqrt(plaintext_squared)))
